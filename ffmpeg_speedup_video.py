# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import os
import subprocess
import threading
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import json
import tkinterdnd2 as tkdnd
import pyperclip
import re

def auto_close_messagebox(title, message, auto_close_time=3000):
    """T·∫°o messagebox t·ª± ƒë·ªông ƒë√≥ng sau th·ªùi gian ch·ªâ ƒë·ªãnh (ms)"""
    # T·∫°o c·ª≠a s·ªï popup t√πy ch·ªânh
    popup = tk.Toplevel(root)
    popup.title(title)
    popup.geometry("400x150")
    popup.configure(bg="#f0f0f0")
    popup.resizable(False, False)
    
    # ƒê·∫∑t c·ª≠a s·ªï ·ªü gi·ªØa m√†n h√¨nh
    popup.transient(root)
    popup.grab_set()
    
    # T√≠nh to√°n v·ªã tr√≠ trung t√¢m
    popup.update_idletasks()
    x = (popup.winfo_screenwidth() // 2) - (popup.winfo_width() // 2)
    y = (popup.winfo_screenheight() // 2) - (popup.winfo_height() // 2)
    popup.geometry(f"+{x}+{y}")
    
    # Frame ch√≠nh
    main_frame = tk.Frame(popup, bg="#f0f0f0")
    main_frame.pack(fill="both", expand=True, padx=20, pady=20)
    
    # Icon v√† th√¥ng b√°o
    icon_label = tk.Label(main_frame, text="‚úÖ", font=("Arial", 24), bg="#f0f0f0", fg="#27ae60")
    icon_label.pack(pady=(0, 10))
    
    message_label = tk.Label(main_frame, text=message, font=("Arial", 11), bg="#f0f0f0", 
                            wraplength=350, justify="center")
    message_label.pack(pady=(0, 15))
    
    # Countdown label
    countdown_var = tk.StringVar()
    countdown_label = tk.Label(main_frame, textvariable=countdown_var, font=("Arial", 9), 
                              bg="#f0f0f0", fg="#7f8c8d")
    countdown_label.pack()
    
    # N√∫t ƒë√≥ng
    btn_frame = tk.Frame(main_frame, bg="#f0f0f0")
    btn_frame.pack(fill="x", pady=(10, 0))
    
    def close_popup():
        """ƒê√≥ng c·ª≠a s·ªï popup"""
        popup.destroy()
    
    ok_button = tk.Button(btn_frame, text="OK", command=close_popup, 
                         bg="#27ae60", fg="white", font=("Arial", 10, "bold"),
                         padx=20)
    ok_button.pack()
    
    # Countdown timer
    countdown_seconds = auto_close_time // 1000
    
    def update_countdown():
        """C·∫≠p nh·∫≠t ƒë·∫øm ng∆∞·ª£c v√† t·ª± ƒë·ªông ƒë√≥ng"""
        nonlocal countdown_seconds
        if countdown_seconds > 0:
            countdown_var.set(f"T·ª± ƒë·ªông ƒë√≥ng sau {countdown_seconds} gi√¢y...")
            countdown_seconds -= 1
            popup.after(1000, update_countdown)
        else:
            close_popup()
    
    # B·∫Øt ƒë·∫ßu countdown
    update_countdown()
    
    # X·ª≠ l√Ω ph√≠m Enter v√† Escape
    def on_key(event):
        if event.keysym in ['Return', 'Escape']:
            close_popup()
    
    popup.bind('<Key>', on_key)
    popup.focus_set()

def get_video_info(file_path):
    """L·∫•y th√¥ng tin chi ti·∫øt video b·∫±ng ffprobe"""
    try:
        # C√¢u l·ªánh ffprobe ƒë·ªÉ l·∫•y th√¥ng tin video
        cmd = [
            "ffprobe", "-v", "quiet", "-print_format", "json", 
            "-show_format", "-show_streams", file_path
        ]
        # Ch·∫°y l·ªánh v√† capture output
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            # Parse JSON data t·ª´ ffprobe
            data = json.loads(result.stdout)
            
            # T√¨m video stream v√† audio stream ƒë·∫ßu ti√™n
            video_stream = None
            audio_stream = None
            
            for stream in data.get('streams', []):
                if stream.get('codec_type') == 'video' and not video_stream:
                    video_stream = stream
                elif stream.get('codec_type') == 'audio' and not audio_stream:
                    audio_stream = stream
            
            # L·∫•y th√¥ng tin format chung
            format_info = data.get('format', {})
            
            # T·∫°o dictionary ch·ª©a th√¥ng tin video
            info = {
                'duration': float(format_info.get('duration', 0)),  # Th·ªùi l∆∞·ª£ng (gi√¢y)
                'size': int(format_info.get('size', 0)),  # K√≠ch th∆∞·ªõc file (bytes)
                'bitrate': int(format_info.get('bit_rate', 0)) if format_info.get('bit_rate') else 0,  # Bitrate t·ªïng
                'video_width': int(video_stream.get('width', 0)) if video_stream else 0,  # ƒê·ªô r·ªông video
                'video_height': int(video_stream.get('height', 0)) if video_stream else 0,  # ƒê·ªô cao video
                'video_fps': eval(video_stream.get('r_frame_rate', '0/1')) if video_stream else 0,  # Frame rate
                'video_codec': video_stream.get('codec_name', 'N/A') if video_stream else 'N/A',  # Codec video
                'audio_bitrate': int(audio_stream.get('bit_rate', 0)) if audio_stream and audio_stream.get('bit_rate') else 0,  # Bitrate audio
                'audio_sample_rate': int(audio_stream.get('sample_rate', 0)) if audio_stream else 0,  # Sample rate audio
                'audio_codec': audio_stream.get('codec_name', 'N/A') if audio_stream else 'N/A'  # Codec audio
            }
            return info
        else:
            return None
    except Exception as e:
        print(f"L·ªói khi l·∫•y th√¥ng tin video: {e}")
        return None

def format_duration(seconds):
    """Chuy·ªÉn ƒë·ªïi gi√¢y th√†nh ƒë·ªãnh d·∫°ng HH:MM:SS d·ªÖ ƒë·ªçc"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    return f"{hours:02d}:{minutes:02d}:{secs:02d}"

def format_size(bytes_size):
    """Chuy·ªÉn ƒë·ªïi bytes th√†nh ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc (KB, MB, GB)"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    return f"{bytes_size:.1f} TB"

def format_bitrate(bitrate):
    """Chuy·ªÉn ƒë·ªïi bitrate th√†nh ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc (Kbps, Mbps)"""
    if bitrate >= 1000000:
        return f"{bitrate/1000000:.1f} Mbps"
    elif bitrate >= 1000:
        return f"{bitrate/1000:.1f} Kbps"
    else:
        return f"{bitrate} bps"

def show_video_info():
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt video trong c·ª≠a s·ªï ph·ª•"""
    input_path = entry_path.get()
    if not os.path.isfile(input_path):
        messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file video tr∆∞·ªõc!")
        return
    
    # T·∫°o c·ª≠a s·ªï m·ªõi hi·ªÉn th·ªã th√¥ng tin video
    info_window = tk.Toplevel(root)
    info_window.title("üìä Th√¥ng tin ch·∫•t l∆∞·ª£ng video")
    info_window.geometry("1200x800")
    info_window.configure(bg="#f0f0f0")
    
    # T·∫°o header v·ªõi m√†u n·ªÅn ƒë·∫πp
    header_frame = tk.Frame(info_window, bg="#34495e", height=50)
    header_frame.pack(fill="x", padx=5, pady=5)
    header_frame.pack_propagate(False)
    
    title_label = tk.Label(header_frame, text="üìä Th√¥ng tin ch·∫•t l∆∞·ª£ng video", 
                          font=("Arial", 14, "bold"), fg="white", bg="#34495e")
    title_label.pack(pady=10)
    
    # Frame ch·ª©a c√°c n√∫t ƒëi·ªÅu khi·ªÉn
    control_frame = tk.Frame(info_window, bg="#f0f0f0")
    control_frame.pack(fill="x", padx=10, pady=5)
    
    # Ki·ªÉm tra xem file output ƒë√£ t·ªìn t·∫°i ch∆∞a ƒë·ªÉ enable n√∫t so s√°nh
    speed = entry_speed.get()
    try:
        speed_val = float(speed)
        base, ext = os.path.splitext(input_path)
        output_path = f"{base}_{int(speed_val)}x{ext}"
        output_exists = os.path.isfile(output_path)
    except:
        output_exists = False
    
    # N√∫t so s√°nh k·∫øt qu·∫£ (ch·ªâ enable khi c√≥ file output)
    btn_compare = tk.Button(control_frame, text="‚öñÔ∏è So s√°nh k·∫øt qu·∫£", 
                           command=lambda: show_comparison_in_window(info_window), 
                           bg="#9b59b6", fg="white", font=("Arial", 9),
                           state="normal" if output_exists else "disabled")
    btn_compare.pack(side="left", padx=5)
    
    # Frame ch√≠nh ch·ª©a c√°c tab
    main_frame = tk.Frame(info_window, bg="#f0f0f0")
    main_frame.pack(fill="both", expand=True, padx=10, pady=5)
    
    # T·∫°o notebook ƒë·ªÉ qu·∫£n l√Ω tabs
    notebook = ttk.Notebook(main_frame)
    notebook.pack(fill="both", expand=True)
    
    # Tab 1: Th√¥ng tin video g·ªëc
    original_frame = tk.Frame(notebook, bg="#f0f0f0")
    notebook.add(original_frame, text="üìπ Video g·ªëc")
    
    # Tab 2: So s√°nh (ban ƒë·∫ßu disable, s·∫Ω enable sau khi x·ª≠ l√Ω)
    compare_frame = tk.Frame(notebook, bg="#f0f0f0")
    notebook.add(compare_frame, text="‚öñÔ∏è So s√°nh", state="disabled")
    
    # T·∫°o b·∫£ng th√¥ng tin cho video g·ªëc
    create_info_table(original_frame, input_path, "üìπ Th√¥ng tin video g·ªëc")
    
    # L∆∞u reference ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c h√†m kh√°c
    info_window.compare_frame = compare_frame
    info_window.notebook = notebook
    info_window.btn_compare = btn_compare
    
    # L∆∞u window reference v√†o root
    root.info_window = info_window

def show_comparison_in_window(info_window):
    """Hi·ªÉn th·ªã so s√°nh video g·ªëc v√† video ƒë√£ x·ª≠ l√Ω trong c·ª≠a s·ªï th√¥ng tin"""
    input_path = entry_path.get()
    speed = float(entry_speed.get())
    base, ext = os.path.splitext(input_path)
    output_path = f"{base}_{int(speed)}x{ext}"
    
    # Ki·ªÉm tra file output c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.isfile(output_path):
        messagebox.showwarning("C·∫£nh b√°o", "File ƒë·∫ßu ra ch∆∞a t·ªìn t·∫°i. Vui l√≤ng x·ª≠ l√Ω video tr∆∞·ªõc!")
        return
    
    # X√≥a n·ªôi dung c≈© trong tab so s√°nh
    for widget in info_window.compare_frame.winfo_children():
        widget.destroy()
    
    # T·∫°o layout so s√°nh 2 c·ªôt
    compare_main = tk.Frame(info_window.compare_frame, bg="#f0f0f0")
    compare_main.pack(fill="both", expand=True)
    
    # C·ªôt tr√°i - Video g·ªëc
    left_frame = tk.Frame(compare_main, bg="#f0f0f0")
    left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))
    
    # C·ªôt ph·∫£i - Video ƒë√£ x·ª≠ l√Ω
    right_frame = tk.Frame(compare_main, bg="#f0f0f0")
    right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
    
    # T·∫°o b·∫£ng th√¥ng tin cho c·∫£ 2 video
    create_info_table(left_frame, input_path, "üìπ Video g·ªëc")
    create_info_table(right_frame, output_path, f"‚ö° Video sau x·ª≠ l√Ω ({speed}x)")
    
    # Enable tab so s√°nh v√† chuy·ªÉn sang tab ƒë√≥
    info_window.notebook.tab(1, state="normal")
    info_window.notebook.select(1)

def create_info_table(parent_frame, file_path, title):
    """T·∫°o b·∫£ng hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt video"""
    # Ti√™u ƒë·ªÅ b·∫£ng
    title_label = tk.Label(parent_frame, text=title, font=("Arial", 12, "bold"), 
                          bg="#f0f0f0", fg="#2c3e50")
    title_label.pack(pady=(10, 5))
    
    # Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n file
    path_frame = tk.Frame(parent_frame, bg="#f0f0f0")
    path_frame.pack(fill="x", padx=10, pady=5)
    
    tk.Label(path_frame, text="üìÅ File:", font=("Arial", 9, "bold"), bg="#f0f0f0").pack(anchor="w")
    path_text = tk.Text(path_frame, height=2, wrap="word", font=("Arial", 8))
    path_text.pack(fill="x", pady=(2, 10))
    path_text.insert("1.0", file_path)
    path_text.config(state="disabled")
    
    # Frame ch·ª©a b·∫£ng th√¥ng tin
    table_frame = tk.Frame(parent_frame, bg="#f0f0f0")
    table_frame.pack(fill="both", expand=True, padx=10, pady=5)
    
    # L·∫•y th√¥ng tin video
    info = get_video_info(file_path)
    
    if info:
        # T·∫°o treeview ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng b·∫£ng ƒë·∫πp h∆°n
        tree = ttk.Treeview(table_frame, columns=("property", "value"), show="headings", height=12)
        tree.heading("property", text="Thu·ªôc t√≠nh")
        tree.heading("value", text="Gi√° tr·ªã")
        tree.column("property", width=200)
        tree.column("value", width=300)
        
        # Th√™m d·ªØ li·ªáu v√†o b·∫£ng
        tree.insert("", "end", values=("‚è±Ô∏è Th·ªùi l∆∞·ª£ng", format_duration(info['duration'])))
        tree.insert("", "end", values=("üìè K√≠ch th∆∞·ªõc file", format_size(info['size'])))
        tree.insert("", "end", values=("üîó Bitrate t·ªïng", format_bitrate(info['bitrate'])))
        tree.insert("", "end", values=("", ""))  # D√≤ng ph√¢n c√°ch
        tree.insert("", "end", values=("üì∫ TH√îNG TIN VIDEO", ""))
        tree.insert("", "end", values=("üìê ƒê·ªô ph√¢n gi·∫£i", f"{info['video_width']} x {info['video_height']}"))
        tree.insert("", "end", values=("üé¨ Frame rate", f"{info['video_fps']:.2f} fps"))
        tree.insert("", "end", values=("üé• Video codec", info['video_codec']))
        tree.insert("", "end", values=("", ""))  # D√≤ng ph√¢n c√°ch
        tree.insert("", "end", values=("üîä TH√îNG TIN AUDIO", ""))
        tree.insert("", "end", values=("üéµ Audio bitrate", format_bitrate(info['audio_bitrate'])))
        tree.insert("", "end", values=("üìª Sample rate", f"{info['audio_sample_rate']} Hz"))
        tree.insert("", "end", values=("üéº Audio codec", info['audio_codec']))
        
        tree.pack(fill="both", expand=True)
        
        # Thanh cu·ªôn cho b·∫£ng
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        
    else:
        # Hi·ªÉn th·ªã l·ªói n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin
        error_label = tk.Label(table_frame, text="‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video", 
                              font=("Arial", 10), bg="#f0f0f0", fg="red")
        error_label.pack(pady=20)

def show_comparison():
    """Hi·ªÉn th·ªã so s√°nh tr∆∞·ªõc v√† sau khi x·ª≠ l√Ω (s·ª≠ d·ª•ng t·ª´ main window)"""
    # Ki·ªÉm tra xem c·ª≠a s·ªï th√¥ng tin c√≥ ƒëang m·ªü kh√¥ng
    if not hasattr(root, 'info_window') or not root.info_window.winfo_exists():
        show_video_info()
        return
    
    input_path = entry_path.get()
    speed = float(entry_speed.get())
    base, ext = os.path.splitext(input_path)
    output_path = f"{base}_{int(speed)}x{ext}"
    
    # Ki·ªÉm tra file output
    if not os.path.isfile(output_path):
        messagebox.showwarning("C·∫£nh b√°o", "File ƒë·∫ßu ra ch∆∞a t·ªìn t·∫°i. Vui l√≤ng x·ª≠ l√Ω video tr∆∞·ªõc!")
        return
    
    # X√≥a n·ªôi dung c≈© trong tab so s√°nh
    for widget in root.info_window.compare_frame.winfo_children():
        widget.destroy()
    
    # T·∫°o layout so s√°nh 2 c·ªôt
    compare_main = tk.Frame(root.info_window.compare_frame, bg="#f0f0f0")
    compare_main.pack(fill="both", expand=True)
    
    # C·ªôt tr√°i - Video g·ªëc
    left_frame = tk.Frame(compare_main, bg="#f0f0f0")
    left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))
    
    # C·ªôt ph·∫£i - Video ƒë√£ x·ª≠ l√Ω
    right_frame = tk.Frame(compare_main, bg="#f0f0f0")
    right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
    
    # T·∫°o b·∫£ng th√¥ng tin cho c·∫£ 2 video
    create_info_table(left_frame, input_path, "üìπ Video g·ªëc")
    create_info_table(right_frame, output_path, f"‚ö° Video sau x·ª≠ l√Ω ({speed}x)")
    
    # Enable tab so s√°nh v√† chuy·ªÉn sang tab ƒë√≥
    root.info_window.notebook.tab(1, state="normal")
    root.info_window.notebook.select(1)

def is_video_file(file_path):
    """Ki·ªÉm tra xem file c√≥ ph·∫£i l√† ƒë·ªãnh d·∫°ng video ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng"""
    video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v', '.3gp']
    return any(file_path.lower().endswith(ext) for ext in video_extensions)

def extract_file_path_from_text(text):
    """Tr√≠ch xu·∫•t ƒë∆∞·ªùng d·∫´n file video t·ª´ text clipboard"""
    # Lo·∫°i b·ªè k√Ω t·ª± xu·ªëng d√≤ng v√† kho·∫£ng tr·∫Øng th·ª´a
    text = text.strip().replace('\n', '').replace('\r', '')
    
    # Ki·ªÉm tra n·∫øu l√† ƒë∆∞·ªùng d·∫´n Windows ho√†n ch·ªânh v√† h·ª£p l·ªá
    if os.path.isfile(text) and is_video_file(text):
        return text
    
    # T√¨m ƒë∆∞·ªùng d·∫´n trong text b·∫±ng regex patterns
    patterns = [
        r'[A-Za-z]:\\[^<>:"|?*\n\r]*\.[a-zA-Z0-9]{2,4}',  # ƒê∆∞·ªùng d·∫´n Windows
        r'/[^<>:"|?*\n\r]*\.[a-zA-Z0-9]{2,4}',  # ƒê∆∞·ªùng d·∫´n Unix/Linux
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, text)
        for match in matches:
            if os.path.isfile(match) and is_video_file(match):
                return match
    
    return None

def on_drop(event):
    """X·ª≠ l√Ω s·ª± ki·ªán k√©o th·∫£ file v√†o ·ª©ng d·ª•ng"""
    files = root.tk.splitlist(event.data)
    if files:
        file_path = files[0]
        if is_video_file(file_path):
            # T·ª± ƒë·ªông x√≥a log c≈© khi k√©o th·∫£ video m·ªõi
            text_output.delete(1.0, tk.END)
            entry_path.delete(0, tk.END)
            entry_path.insert(0, file_path)
            
            # C·∫•u h√¨nh m√†u s·∫Øc v√† th√™m text th√¥ng b√°o
            text_output.tag_configure("success", foreground="#00ff00", font=("Consolas", 9, "bold"))
            text_output.tag_configure("info", foreground="#00aaff", font=("Consolas", 9, "bold"))
            
            text_output.insert(tk.END, "üìÅ ƒê√£ k√©o th·∫£ file: ", "info")
            text_output.insert(tk.END, f"{os.path.basename(file_path)}\n", "success")
            text_output.insert(tk.END, "‚ú® ƒê√£ t·ª± ƒë·ªông x√≥a log c≈© cho video m·ªõi.\n")
            text_output.insert(tk.END, "-" * 60 + "\n\n")
        else:
            messagebox.showerror("L·ªói", "File kh√¥ng ph·∫£i l√† ƒë·ªãnh d·∫°ng video ƒë∆∞·ª£c h·ªó tr·ª£!")

def paste_from_clipboard():
    """D√°n ƒë∆∞·ªùng d·∫´n video t·ª´ clipboard"""
    try:
        clipboard_text = pyperclip.paste()
        if clipboard_text:
            file_path = extract_file_path_from_text(clipboard_text)
            if file_path:
                # T·ª± ƒë·ªông x√≥a log c≈© khi d√°n video m·ªõi
                text_output.delete(1.0, tk.END)
                entry_path.delete(0, tk.END)
                entry_path.insert(0, file_path)
                
                # C·∫•u h√¨nh m√†u s·∫Øc v√† th√™m text th√¥ng b√°o
                text_output.tag_configure("success", foreground="#00ff00", font=("Consolas", 9, "bold"))
                text_output.tag_configure("info", foreground="#00aaff", font=("Consolas", 9, "bold"))
                
                text_output.insert(tk.END, "üìã ƒê√£ d√°n t·ª´ clipboard: ", "info")
                text_output.insert(tk.END, f"{os.path.basename(file_path)}\n", "success")
                text_output.insert(tk.END, "-" * 60 + "\n\n")
            else:
                # Th·ª≠ d√°n tr·ª±c ti·∫øp n·∫øu kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá
                if os.path.isfile(clipboard_text.strip()) and is_video_file(clipboard_text.strip()):
                    # T·ª± ƒë·ªông x√≥a log c≈© khi d√°n video m·ªõi
                    text_output.delete(1.0, tk.END)
                    entry_path.delete(0, tk.END)
                    entry_path.insert(0, clipboard_text.strip())
                    
                    text_output.tag_configure("success", foreground="#00ff00", font=("Consolas", 9, "bold"))
                    text_output.tag_configure("info", foreground="#00aaff", font=("Consolas", 9, "bold"))
                    
                    text_output.insert(tk.END, "üìã ƒê√£ d√°n t·ª´ clipboard: ", "info")
                    text_output.insert(tk.END, f"{os.path.basename(clipboard_text.strip())}\n", "success")
                    text_output.insert(tk.END, "-" * 60 + "\n\n")
                else:
                    messagebox.showwarning("C·∫£nh b√°o", "Clipboard kh√¥ng ch·ª©a ƒë∆∞·ªùng d·∫´n video h·ª£p l·ªá!")
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ truy c·∫≠p clipboard: {str(e)}")

def on_entry_key(event):
    """X·ª≠ l√Ω ph√≠m t·∫Øt trong √¥ nh·∫≠p ƒë∆∞·ªùng d·∫´n (Ctrl+V ƒë·ªÉ d√°n)"""
    if event.keysym == 'v' and event.state & 0x4:  # Ph√°t hi·ªán Ctrl+V
        root.after_idle(paste_from_clipboard)
        return "break"

def select_file():
    """M·ªü dialog ch·ªçn file video"""
    filepath = filedialog.askopenfilename(filetypes=[("Video files", "*.mp4 *.avi *.mov *.mkv *.wmv *.flv *.webm *.m4v *.3gp")])
    if filepath:
        # T·ª± ƒë·ªông x√≥a log c≈© khi ch·ªçn video m·ªõi
        text_output.delete(1.0, tk.END)
        entry_path.delete(0, tk.END)
        entry_path.insert(0, filepath)
        
        # C·∫•u h√¨nh m√†u s·∫Øc v√† th√™m text th√¥ng b√°o
        text_output.tag_configure("success", foreground="#00ff00", font=("Consolas", 9, "bold"))
        text_output.tag_configure("info", foreground="#00aaff", font=("Consolas", 9, "bold"))
        
        text_output.insert(tk.END, "üìÇ ƒê√£ ch·ªçn file: ", "info")
        text_output.insert(tk.END, f"{os.path.basename(filepath)}\n", "success")
        text_output.insert(tk.END, "-" * 60 + "\n\n")

def process_video():
    """H√†m ch√≠nh x·ª≠ l√Ω tƒÉng t·ªëc video b·∫±ng FFmpeg"""
    # L·∫•y th√¥ng tin t·ª´ giao di·ªán
    input_path = entry_path.get()
    speed = entry_speed.get()
    bitrate = entry_bitrate.get()

    # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ƒë∆∞·ªùng d·∫´n file
    if not os.path.isfile(input_path):
        messagebox.showerror("L·ªói", "ƒê∆∞·ªùng d·∫´n t·ªáp kh√¥ng h·ª£p l·ªá!")
        return

    # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa t·ªëc ƒë·ªô
    try:
        speed = float(speed)
        if speed <= 0:
            raise ValueError
    except ValueError:
        messagebox.showerror("L·ªói", "T·ªëc ƒë·ªô ph·∫£i l√† s·ªë l·ªõn h∆°n 0!")
        return

    # T·∫°o t√™n file output
    base, ext = os.path.splitext(input_path)
    output_path = f"{base}_{int(speed)}x{ext}"

    # X√¢y d·ª±ng c√¢u l·ªánh FFmpeg v·ªõi hardware acceleration
    cmd = [
        "ffmpeg",
        "-hwaccel", "cuda",  # S·ª≠ d·ª•ng GPU NVIDIA ƒë·ªÉ tƒÉng t·ªëc
        "-i", input_path,
        "-filter_complex", f"[0:v]setpts={1/speed}*PTS[v];[0:a]atempo={speed}[a]",  # Filter tƒÉng t·ªëc video v√† audio
        "-map", "[v]",  # Map video stream
        "-map", "[a]",  # Map audio stream
        "-c:v", "h264_nvenc",  # S·ª≠ d·ª•ng encoder NVIDIA
        "-preset", "fast"  # Preset t·ªëc ƒë·ªô nhanh
    ]

    # Th√™m bitrate n·∫øu ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh
    if bitrate.strip() != "" and bitrate.strip().lower() != "auto":
        cmd += ["-b:v", bitrate]

    cmd.append(output_path)

    # Disable n√∫t x·ª≠ l√Ω v√† b·∫Øt ƒë·∫ßu progress bar
    btn_process.config(state="disabled", text="ƒêang x·ª≠ l√Ω...")
    progress_bar.start(10)
    text_output.delete(1.0, tk.END)
    
    # C·∫•u h√¨nh c√°c tag m√†u s·∫Øc cho output text
    text_output.tag_configure("success", foreground="#00ff00", font=("Consolas", 9, "bold"))
    text_output.tag_configure("error", foreground="#ff4444", font=("Consolas", 9, "bold"))
    text_output.tag_configure("warning", foreground="#ffaa00", font=("Consolas", 9, "bold"))
    text_output.tag_configure("info", foreground="#00aaff", font=("Consolas", 9, "bold"))
    text_output.tag_configure("header", foreground="#ff88ff", font=("Consolas", 9, "bold"))
    text_output.tag_configure("progress", foreground="#88ff88", font=("Consolas", 9))
    text_output.tag_configure("command", foreground="#ffff88", font=("Consolas", 8))
    
    # Hi·ªÉn th·ªã th√¥ng tin b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
    text_output.insert(tk.END, "üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video...\n", "success")
    text_output.insert(tk.END, f"üìÅ Input: ", "info")
    text_output.insert(tk.END, f"{input_path}\n")
    text_output.insert(tk.END, f"‚ö° Speed: ", "info")
    text_output.insert(tk.END, f"{speed}x\n", "warning")
    text_output.insert(tk.END, f"üíæ Output: ", "info")
    text_output.insert(tk.END, f"{output_path}\n")
    text_output.insert(tk.END, "-" * 80 + "\n")
    text_output.insert(tk.END, "üíª C√¢u l·ªánh FFmpeg ƒë·∫ßy ƒë·ªß:\n", "header")
    
    # Hi·ªÉn th·ªã c√¢u l·ªánh FFmpeg ƒë∆∞·ª£c s·ª≠ d·ª•ng
    cmd_string = " ".join([f'"{arg}"' if " " in arg else arg for arg in cmd])
    text_output.insert(tk.END, f"{cmd_string}\n", "command")
    text_output.insert(tk.END, "-" * 80 + "\n")
    text_output.insert(tk.END, "üìä Ti·∫øn tr√¨nh x·ª≠ l√Ω:\n", "header")

    def run_ffmpeg():
        """Ch·∫°y FFmpeg trong thread ri√™ng ƒë·ªÉ kh√¥ng block UI"""
        try:
            # Kh·ªüi t·∫°o process FFmpeg
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, 
                                     universal_newlines=True, bufsize=1)

            last_progress_line = None
            # ƒê·ªçc output t·ª´ FFmpeg theo real-time
            for line in iter(process.stdout.readline, ''):
                line = line.rstrip('\n\r')
                if not line:
                    continue
                
                # Ki·ªÉm tra xem user c√≥ ƒëang ·ªü cu·ªëi text kh√¥ng ƒë·ªÉ t·ª± ƒë·ªông scroll
                at_bottom = text_output.yview()[1] == 1.0
                    
                # Ki·ªÉm tra n·∫øu l√† d√≤ng progress (ch·ª©a frame=, fps=, time=)
                if 'frame=' in line and 'fps=' in line and 'time=' in line:
                    # ƒê√¢y l√† d√≤ng c·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                    if last_progress_line is not None:
                        # X√≥a d√≤ng progress tr∆∞·ªõc ƒë√≥ ƒë·ªÉ thay th·∫ø
                        try:
                            text_output.delete("end-2l linestart", "end-1l linestart")
                        except:
                            pass
                    
                    text_output.insert(tk.END, line + "\n", "progress")
                    last_progress_line = line
                else:
                    # ƒê√¢y l√† d√≤ng output th√¥ng th∆∞·ªùng
                    if "error" in line.lower() or "failed" in line.lower():
                        text_output.insert(tk.END, line + "\n", "error")
                    elif "warning" in line.lower():
                        text_output.insert(tk.END, line + "\n", "warning")
                    else:
                        text_output.insert(tk.END, line + "\n")
                    last_progress_line = None
                
                # Ch·ªâ t·ª± ƒë·ªông scroll n·∫øu user ƒëang ·ªü cu·ªëi
                if at_bottom:
                    text_output.see(tk.END)
                root.update_idletasks()
                
            # Ch·ªù process k·∫øt th√∫c
            process.wait()

            # D·ª´ng progress bar v√† enable l·∫°i n√∫t x·ª≠ l√Ω
            progress_bar.stop()
            btn_process.config(state="normal", text="üöÄ TƒÉng t·ªëc v√† xu·∫•t video")
            
            # Ki·ªÉm tra k·∫øt qu·∫£ x·ª≠ l√Ω
            if process.returncode == 0:
                # Th√†nh c√¥ng
                text_output.insert(tk.END, "\n" + "=" * 80 + "\n")
                text_output.insert(tk.END, "‚úÖ Th√†nh c√¥ng! Video ƒë√£ ƒë∆∞·ª£c t·∫°o.\n", "success")
                text_output.insert(tk.END, "üìç V·ªã tr√≠: ", "info")
                text_output.insert(tk.END, f"{output_path}\n", "success")
                text_output.see(tk.END)  # Lu√¥n scroll ƒë·∫øn cu·ªëi khi ho√†n th√†nh
                
                # Enable n√∫t so s√°nh trong c·ª≠a s·ªï th√¥ng tin n·∫øu c√≥
                if hasattr(root, 'info_window') and root.info_window.winfo_exists():
                    root.info_window.btn_compare.config(state="normal")
                
                # S·ª≠ d·ª•ng messagebox t·ª± ƒë·ªông ƒë√≥ng thay v√¨ messagebox th√¥ng th∆∞·ªùng
                auto_close_messagebox("Th√†nh c√¥ng", "Video ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!\nT·ª± ƒë·ªông ƒë√≥ng sau 3 gi√¢y.", 3000)
            else:
                # L·ªói x·ª≠ l√Ω
                text_output.insert(tk.END, "\n‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω!\n", "error")
                text_output.see(tk.END)
                messagebox.showerror("L·ªói", "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω!")

        except Exception as e:
            # X·ª≠ l√Ω exception
            progress_bar.stop()
            btn_process.config(state="normal", text="üöÄ TƒÉng t·ªëc v√† xu·∫•t video")
            text_output.insert(tk.END, f"\nüí• L·ªói: {str(e)}\n", "error")
            text_output.see(tk.END)
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

    # Ch·∫°y FFmpeg trong thread ri√™ng
    threading.Thread(target=run_ffmpeg, daemon=True).start()

def clear_log():
    """X√≥a t·∫•t c·∫£ log v√† reset ƒë∆∞·ªùng d·∫´n file"""
    text_output.delete(1.0, tk.END)
    entry_path.delete(0, tk.END)
    
    # C·∫•u h√¨nh m√†u s·∫Øc cho th√¥ng b√°o
    text_output.tag_configure("warning", foreground="#ffaa00", font=("Consolas", 9, "bold"))
    text_output.tag_configure("info", foreground="#00aaff", font=("Consolas", 9, "bold"))
    text_output.tag_configure("header", foreground="#ff88ff", font=("Consolas", 9, "bold"))
    
    # Hi·ªÉn th·ªã th√¥ng b√°o x√≥a v√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    text_output.insert(tk.END, "üóëÔ∏è ƒê√£ x√≥a log v√† ƒë∆∞·ªùng d·∫´n file.\n", "warning")
    # Hi·ªÉn th·ªã l·∫°i h∆∞·ªõng d·∫´n ban ƒë·∫ßu
    text_output.insert(tk.END, "üé¨ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Video Speed Controller!\n", "header")
    text_output.insert(tk.END, "üìù H∆∞·ªõng d·∫´n:\n", "info")
    text_output.insert(tk.END, "1. üñ±Ô∏è K√©o th·∫£ file video v√†o c·ª≠a s·ªï n√†y\n")
    text_output.insert(tk.END, "2. üìÇ Ho·∫∑c ch·ªçn file b·∫±ng n√∫t 'Ch·ªçn file'\n")
    text_output.insert(tk.END, "3. üìã Ho·∫∑c d√°n ƒë∆∞·ªùng d·∫´n t·ª´ clipboard (Ctrl+V)\n")
    text_output.insert(tk.END, "4. ‚öôÔ∏è ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô (2.0 = tƒÉng t·ªëc 2 l·∫ßn)\n")
    text_output.insert(tk.END, "5. üéöÔ∏è T√πy ch·ªçn: ƒêi·ªÅu ch·ªânh bitrate (ƒë·ªÉ tr·ªëng = t·ª± ƒë·ªông)\n")
    text_output.insert(tk.END, "6. üöÄ Nh·∫•n 'TƒÉng t·ªëc v√† xu·∫•t video' ho·∫∑c Enter\n")
    text_output.insert(tk.END, "-" * 60 + "\n\n")

def on_enter_key(event):
    """X·ª≠ l√Ω ph√≠m Enter ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω video"""
    if btn_process['state'] == 'normal':
        process_video()

# Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh
root = tkdnd.TkinterDnD.Tk()
root.title("üé¨ FFmpeg Video Speed Controller")
root.geometry("1200x800")
root.configure(bg="#f0f0f0")

# B·∫≠t t√≠nh nƒÉng k√©o th·∫£
root.drop_target_register(tkdnd.DND_FILES)
root.dnd_bind('<<Drop>>', on_drop)

# C·∫•u h√¨nh style cho ttk widgets
style = ttk.Style()
style.theme_use('clam')

# T·∫°o header frame v·ªõi m√†u n·ªÅn ƒë·∫πp
header_frame = tk.Frame(root, bg="#2c3e50", height=60)
header_frame.pack(fill="x", padx=5, pady=5)
header_frame.pack_propagate(False)

title_label = tk.Label(header_frame, text="üé¨ Video Speed Controller", 
                      font=("Arial", 16, "bold"), fg="white", bg="#2c3e50")
title_label.pack(pady=15)

# Frame ch√≠nh ch·ª©a t·∫•t c·∫£ n·ªôi dung
main_frame = tk.Frame(root, bg="#f0f0f0")
main_frame.pack(fill="both", expand=True, padx=10, pady=5)

# Ph·∫ßn ch·ªçn file input
input_frame = tk.LabelFrame(main_frame, text="üìÅ Ch·ªçn video", font=("Arial", 10, "bold"), 
                           bg="#f0f0f0", fg="#2c3e50", padx=10, pady=10)
input_frame.pack(fill="x", pady=(0, 10))

tk.Label(input_frame, text="ƒê∆∞·ªùng d·∫´n:", bg="#f0f0f0", font=("Arial", 9)).grid(row=0, column=0, sticky="w", pady=5)
entry_path = tk.Entry(input_frame, width=70, font=("Arial", 9))
entry_path.grid(row=0, column=1, padx=(5, 5), pady=5)
entry_path.bind('<KeyPress>', on_entry_key)  # Bind ph√≠m t·∫Øt

btn_browse = tk.Button(input_frame, text="üìÇ Ch·ªçn file", command=select_file, 
                      bg="#3498db", fg="white", font=("Arial", 9, "bold"))
btn_browse.grid(row=0, column=2, padx=(5, 5), pady=5)

btn_paste = tk.Button(input_frame, text="üìã D√°n", command=paste_from_clipboard, 
                     bg="#f39c12", fg="white", font=("Arial", 9, "bold"))
btn_paste.grid(row=0, column=3, padx=(5, 0), pady=5)

# Ph·∫ßn c√†i ƒë·∫∑t t·ªëc ƒë·ªô v√† bitrate
settings_frame = tk.LabelFrame(main_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t", font=("Arial", 10, "bold"), 
                              bg="#f0f0f0", fg="#2c3e50", padx=10, pady=10)
settings_frame.pack(fill="x", pady=(0, 10))

tk.Label(settings_frame, text="T·ªëc ƒë·ªô (X):", bg="#f0f0f0", font=("Arial", 9)).grid(row=0, column=0, sticky="w", pady=5)
entry_speed = tk.Entry(settings_frame, width=15, font=("Arial", 9))
entry_speed.insert(0, "2.0")  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
entry_speed.grid(row=0, column=1, sticky="w", padx=(5, 20), pady=5)

tk.Label(settings_frame, text="Bitrate:", bg="#f0f0f0", font=("Arial", 9)).grid(row=0, column=2, sticky="w", pady=5)
entry_bitrate = tk.Entry(settings_frame, width=15, font=("Arial", 9))
entry_bitrate.grid(row=0, column=3, sticky="w", padx=(5, 0), pady=5)
entry_bitrate.insert(0, "")
entry_bitrate.config(fg="grey")
entry_bitrate.insert(0, "Auto")  # Placeholder text

def on_bitrate_focus_in(event):
    """X√≥a placeholder khi focus v√†o √¥ bitrate"""
    if entry_bitrate.get() == "Auto":
        entry_bitrate.delete(0, tk.END)
        entry_bitrate.config(fg="black")

def on_bitrate_focus_out(event):
    """Th√™m l·∫°i placeholder khi focus ra kh·ªèi √¥ bitrate"""
    if entry_bitrate.get().strip() == "":
        entry_bitrate.insert(0, "Auto")
        entry_bitrate.config(fg="grey")

entry_bitrate.bind("<FocusIn>", on_bitrate_focus_in)
entry_bitrate.bind("<FocusOut>", on_bitrate_focus_out)

# Frame ch·ª©a c√°c n√∫t ƒëi·ªÅu khi·ªÉn
control_frame = tk.Frame(main_frame, bg="#f0f0f0")
control_frame.pack(fill="x", pady=(0, 10))

btn_process = tk.Button(control_frame, text="üöÄ TƒÉng t·ªëc v√† xu·∫•t video", command=process_video, 
                       bg="#27ae60", fg="white", font=("Arial", 11, "bold"), height=2)
btn_process.pack(side="left", padx=(0, 10))

btn_clear = tk.Button(control_frame, text="üóëÔ∏è Clear All", command=clear_log, 
                     bg="#e74c3c", fg="white", font=("Arial", 9))
btn_clear.pack(side="left", padx=(0, 10))

btn_info = tk.Button(control_frame, text="üìä Th√¥ng tin video", command=show_video_info, 
                    bg="#3498db", fg="white", font=("Arial", 9))
btn_info.pack(side="left")

# Thanh progress bar
progress_bar = ttk.Progressbar(control_frame, mode='indeterminate')
progress_bar.pack(side="right", fill="x", expand=True, padx=(10, 0))

# Ph·∫ßn hi·ªÉn th·ªã k·∫øt qu·∫£ v√† log
output_frame = tk.LabelFrame(main_frame, text="üìã K·∫øt qu·∫£ x·ª≠ l√Ω", font=("Arial", 10, "bold"), 
                            bg="#f0f0f0", fg="#2c3e50", padx=5, pady=5)
output_frame.pack(fill="both", expand=True)

text_output = scrolledtext.ScrolledText(output_frame, height=20, width=120, 
                                       font=("Consolas", 9), bg="#1e1e1e", fg="#ffffff",
                                       insertbackground="white")
text_output.pack(fill="both", expand=True, padx=5, pady=5)

# Bind ph√≠m Enter ƒë·ªÉ x·ª≠ l√Ω video
root.bind('<Return>', on_enter_key)

# Hi·ªÉn th·ªã th√¥ng b√°o ch√†o m·ª´ng v√† h∆∞·ªõng d·∫´n ban ƒë·∫ßu
text_output.tag_configure("header", foreground="#ff88ff", font=("Consolas", 9, "bold"))
text_output.tag_configure("info", foreground="#00aaff", font=("Consolas", 9, "bold"))

text_output.insert(tk.END, "üé¨ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Video Speed Controller!\n", "header")
text_output.insert(tk.END, "üìù H∆∞·ªõng d·∫´n:\n", "info")
text_output.insert(tk.END, "1. üñ±Ô∏è K√©o th·∫£ file video v√†o c·ª≠a s·ªï n√†y\n")
text_output.insert(tk.END, "2. üìÇ Ho·∫∑c ch·ªçn file b·∫±ng n√∫t 'Ch·ªçn file'\n")
text_output.insert(tk.END, "3. üìã Ho·∫∑c d√°n ƒë∆∞·ªùng d·∫´n t·ª´ clipboard (Ctrl+V)\n")
text_output.insert(tk.END, "4. ‚öôÔ∏è ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô (2.0 = tƒÉng t·ªëc 2 l·∫ßn)\n")
text_output.insert(tk.END, "5. üéöÔ∏è T√πy ch·ªçn: ƒêi·ªÅu ch·ªânh bitrate (ƒë·ªÉ tr·ªëng = t·ª± ƒë·ªông)\n")
text_output.insert(tk.END, "6. üöÄ Nh·∫•n 'TƒÉng t·ªëc v√† xu·∫•t video' ho·∫∑c Enter\n")
text_output.insert(tk.END, "-" * 60 + "\n\n")

# B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh c·ªßa ·ª©ng d·ª•ng
root.mainloop()
